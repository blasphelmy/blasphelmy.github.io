<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>2048</title>
</head>
<style>
    @font-face {
        /* i really like this font */
        font-family: "San Francisco";
        font-weight: 100;
        src: url("https://applesocial.s3.amazonaws.com/assets/styles/fonts/sanfrancisco/sanfranciscodisplay-ultralight-webfont.woff");
    }

    @font-face {
        font-family: "San Francisco Thin";
        font-weight: 200;
        src: url("https://applesocial.s3.amazonaws.com/assets/styles/fonts/sanfrancisco/sanfranciscodisplay-thin-webfont.woff");
    }

    @font-face {
        font-family: "San Francisco Regular";
        font-weight: 400;
        src: url("https://applesocial.s3.amazonaws.com/assets/styles/fonts/sanfrancisco/sanfranciscodisplay-regular-webfont.woff");
    }

    @font-face {
        font-family: "San Francisco Bold";
        font-weight: 600;
        src: url("https://applesocial.s3.amazonaws.com/assets/styles/fonts/sanfrancisco/sanfranciscodisplay-semibold-webfont.woff");
    }

    @font-face {
        font-family: "San Francisco Medium";
        font-weight: 500;
        src: url("https://applesocial.s3.amazonaws.com/assets/styles/fonts/sanfrancisco/sanfranciscodisplay-medium-webfont.woff");
    }

    #wrapper {
        position: absolute;
        width: auto;
        height: auto;
    }

    #gameBoard {
        display: grid;
        /* grid-template-columns: repeat(4, minmax(0, 100px));
        grid-template-rows: repeat(4, minmax(0, 100px));  */
        margin: auto;
        border-bottom-width: .5px;
        border-bottom-style: solid;
        border-right-width: .5px;
        border-right-style: solid;
        background-color: #bbada0;
        border-radius: 10px;
        overflow: hidden;
        -webkit-box-shadow: 0px 3px 36px 4px rgba(255, 255, 255, 0.43);
        box-shadow: 0px 3px 36px 4px rgba(12, 12, 12, 0.521);
        /* border-width: 1px;
        border-style: solid;
        border-color: gray; */
        backdrop-filter: blur(25px);
        -webkit-backdrop-filter: blur(25px);
        -moz-backdrop-filter: blur(25px);
        padding: 0px;
        width: fit-content;

    }

    tileContainer {
        position: relative;
        height: 73px;
        width: 73px;
        border-width: 1px;
        border-color: rgb(80, 80, 80);
        border-style: solid;
        padding: 0;
    }

    .tile {
        position: absolute;
        height: 73px;
        width: 73px;
        background-color: #bbada0;
        /* border-width: 1px;
        border-color: black;
        border-style: solid; */
        padding: 0;
    }

    .tile>p {
        position: relative;
        font-size: 25px;
        top: -3px;
        text-align: center;
        font-family: "San Francisco Medium";
    }

    /* .active {
        background-color: rgba(243, 199, 76, 0.808);
        z-index: 10;
    } */
</style>
<script>
    class gameBoard {
        // defaultArray;
        gameArray;
        memoryLane;
        score;
        boardSize;
        requiredStreak;
        numOfRandomTilesPerMove;
        numberofActiveTileWorkers;
        x;
        constructor(size) {
            this.createGameElements(size);

            this.score = 0;
            this.boardSize = size;

            if (this.boardSize <= 4) {
                this.requiredStreak = 2;
                this.numOfRandomTilesPerMove = 1;
            } else if (this.boardSize == 5) {
                this.requiredStreak = 2;
                this.numOfRandomTilesPerMove = 2;
            } else if (this.boardSize == 6) {
                this.requiredStreak = 2;
                this.numOfRandomTilesPerMove = 3;
            } else if (this.boardSize == 7) {
                this.requiredStreak = 2;
                this.numOfRandomTilesPerMove = 4;
            } else {
                this.requiredStreak = 3;
                this.numOfRandomTilesPerMove = 1;
            }
            this.numberofActiveTileWorkers = { //this is really weird and i regreat making this into a class in the first place. it
                aInternal: 0,
                aListener: function (val) { },
                set active(val) {
                    this.aInternal = val;
                    this.aListener(val);
                },
                get active() {
                    return this.aInternal;
                },
                registerListener: function (listener) {
                    this.aListener = listener;
                }
            }

            var gameArray = this.gameArray;
            var requiredStreak = this.requiredStreak;
            var numOfRandomTilesPerMove = this.numOfRandomTilesPerMove;


            this.numberofActiveTileWorkers.registerListener(function (val) {
                if (val === 0) {
                    displayArray();
                    newRandomTile();
                }

                function setTileColor(value, element) {
                    switch (value) {
                        case 2:
                            element.style.setProperty("background-color", "#eee4da");
                            break;
                        case 4:
                        case 6:
                            element.style.setProperty("background-color", "#eee1c9");
                            break;
                        case 8:
                        case 18:
                            element.style.setProperty("background-color", "#f3b27a");
                            element.style.setProperty("color", "#f9f6f2");
                            break;
                        case 16:
                        case 54:
                            element.style.setProperty("background-color", "#f69664");
                            element.style.setProperty("color", "#f9f6f2");
                            break;
                        case 32:
                        case 162:
                            element.style.setProperty("background-color", "#33AD56");
                            element.style.setProperty("color", "#f9f6f2");
                            break;
                        case 64:
                        case 486:
                            element.style.setProperty("background-color", "#3EC13E");
                            element.style.setProperty("color", "#f9f6f2");
                            break;
                        case 128:
                        case 1458:
                            element.style.setProperty("background-color", "#32a8a4");
                            element.style.setProperty("color", "#f9f6f2");
                            break;
                        case 256:
                        case 4374:
                            element.style.setProperty("background-color", "#3292a8");
                            element.style.setProperty("color", "#f9f6f2");
                            break;
                        case 512:
                        case 13122:
                            element.style.setProperty("background-color", "#ba2f2f");
                            element.style.setProperty("color", "#f9f6f2");
                            break;
                        case 1024:
                        case 39366:
                            element.style.setProperty("background-color", "#db2370");
                            element.style.setProperty("color", "#f9f6f2");
                            break;
                        case 2048:
                            element.style.setProperty("background-color", "#b825b8");
                            element.style.setProperty("color", "#f9f6f2");
                            break;
                        case 4096:
                            element.style.setProperty("background-color", "#FF4DBB");
                            element.style.setProperty("color", "#f9f6f2");
                            break;
                        case 8192:
                            element.style.setProperty("background-color", "#d6006b");
                            element.style.setProperty("color", "#f9f6f2");
                            break;
                        case 16384:
                            element.style.setProperty("background-color", "#CC33FF");
                            element.style.setProperty("color", "#f9f6f2");
                            break;
                        default:
                            element.style.setProperty("background-color", "CC33FF");
                            element.style.setProperty("color", "#f9f6f2");
                    }
                }

                function displayArray() {
                    for (let row = 0; row < gameArray.length; row++) {
                        for (let col = 0; col < gameArray[0].length; col++) {
                            let cellID = `${row}${col}`;
                            var element = document.getElementById(cellID);
                            element.style.setProperty("background-color", "");
                            element.style.setProperty("color", "black");
                            // endTile.innerHTML = "<p>" + thisValue + "</p>";
                            // setTileColor2(thisValue, endTile);
                            element.innerHTML = "<p></p>";
                            element.style.setProperty("background-color", "");
                            element.style.setProperty("color", "black");
                            element.style.setProperty("z-index", "-1");
                            element.style.setProperty("left", "0px");
                            element.style.setProperty("top", "0px");
                            element.innerHTML = "<p></p>";
                            if (gameArray[row][col] != 0) {
                                element.innerHTML = "<p>" + gameArray[row][col] + "</p>";
                                setTileColor(gameArray[row][col], element);
                            }
                        }
                    }
                }

                function getRandomInt(max) {
                    return Math.floor(Math.random() * max);
                }
                function getRandomInt_Ceil(max) {
                    return Math.ceil(Math.random() * max);
                }
            });
        }
        calculateScore(value) {
            this.score = this.score + (value * this.requiredStreak);
            document.getElementById("scoreTracker").innerText = this.score;
        }
        createGameElements(size) {
            document.getElementById("scoreTracker").innerText = 0;
            this.gameArray = new Array(size);
            this.memoryLane = new Array(size);
            let element = document.getElementById("gameBoard");
            element.style.setProperty('grid-template-columns', "repeat(" + size + ", minmax(0, 75px))");
            element.style.setProperty('grid-template-rows', "repeat(" + size + ", minmax(0, 75px))");

            // console.log(document.getElementById("gameBoard"));

            element.innerHTML = "";

            for (let i = 0; i < size; i++) {
                this.gameArray[i] = new Array(size);
                this.memoryLane[i] = new Array(size);
                for (let j = 0; j < size; j++) {
                    this.gameArray[i][j] = 0;
                    this.memoryLane[i][j] = false;
                    let cellID = `${i}${j}`;
                    let tileContainer = document.createElement("tileContainer");
                    let cell = document.createElement("div");
                    cell.id = cellID;
                    cell.classList.add("tile");
                    let dataNode = document.createElement("p");
                    cell.appendChild(dataNode);
                    tileContainer.appendChild(cell);
                    element.appendChild(tileContainer);
                }
            }
        }
        displayArray() {
            this.numberofActiveTileWorkers.active++;
            this.numberofActiveTileWorkers.active--;
        }
        MoveTile(direction) {
            var somethingHappened = false;
            // this.displayArray();
            if (direction === "left") {
                // console.log(this.gameArray);
                somethingHappened = this.flowLeft();
            } else if (direction === "right") {
                // console.log(this.gameArray);
                somethingHappened = this.flowRight();
            } else if (direction === "down") {
                // console.log(this.gameArray);
                somethingHappened = this.flowDown();
            } else if (direction === "up") {
                // console.log(this.gameArray);
                somethingHappened = this.flowUp();
            }
            if (somethingHappened === true) {
            }
        }
        actuateTile(x1, y1, x2, y2, thisValue) {
            var cellID = `${x1}${y1}`;
            var targetCellID = `${x2}${y2}`;

            var sourceTile = document.getElementById(cellID);
            var endTile = document.getElementById(targetCellID);
            var gameArray = this.gameArray;
            var numberofActiveTileWorkers = this.numberofActiveTileWorkers;

            sourceTile.style.zIndex = 10;
            if (y1 === y2) {
                var offsetY = 75 * (x2 - x1);
            } else if (x1 === x2) {
                var offsetX = 75 * (y2 - y1);
            }
            var id = null;
            var interval = 6;
            var offsetIncrements = 15;
            var top = 0;
            var left = 0;

            clearInterval(id);
            if (offsetY > 0) {
                numberofActiveTileWorkers.active++;
                id = setInterval(moveDown, interval);
            } else if (offsetY < 0) {
                numberofActiveTileWorkers.active++;
                id = setInterval(moveUp, interval);
            } else if (offsetX < 0) {
                numberofActiveTileWorkers.active++;
                id = setInterval(moveLeft, interval);
            } else if (offsetX > 0) {
                numberofActiveTileWorkers.active++;
                id = setInterval(moveRight, interval);
            }

            function moveRight() {
                if (left >= offsetX) {
                    numberofActiveTileWorkers.active--;
                    clearInterval(id);
                } else {
                    left = left + offsetIncrements;
                    sourceTile.style.left = left + "px";
                }
            }
            function moveLeft() {
                if (left <= offsetX) {
                    numberofActiveTileWorkers.active--;
                    clearInterval(id);
                } else {
                    left = left - offsetIncrements;
                    sourceTile.style.left = left + "px";
                }
            }
            function moveUp() {
                if (top <= offsetY) {
                    numberofActiveTileWorkers.active--;
                    clearInterval(id);
                } else {
                    top = top - offsetIncrements;
                    sourceTile.style.top = top + "px";
                }
            }
            function moveDown() {
                if (top >= offsetY) {
                    numberofActiveTileWorkers.active--;
                    clearInterval(id);
                } else {
                    top = top + offsetIncrements;
                    sourceTile.style.top = top + "px";
                }
            }
        }
        flowUp() {
            var somethingHappened = false;
            //bottom up by row, col by col
            for (var col = 0; col < this.gameArray[0].length; col++) {
                var streak = 1;
                var memValue = "undefined" //this should change whenever we hit a tile with a different value
                //length gives us max size, max size - 1 gives us max starting index of gameArray 
                for (var row = 0; row < this.gameArray.length; row++) { //we are on the current cell

                    //step 1 save current cell value to thisValue. thisValue will be useful
                    var thisValue = this.gameArray[row][col]; //we set value of current cell to thisValue 

                    //step 2. ignore if zero

                    //step 2a. first
                    if (thisValue != 0 && thisValue != memValue) {
                        memValue = thisValue;
                        streak = 1;
                    } else if (thisValue === memValue) {
                        streak++;
                    }

                    if (thisValue != 0) {
                        let row_2 = row;

                        while (row_2 > 0 && this.gameArray[row_2 - 1][col] === 0) {
                            row_2--;
                        }

                        if (row_2 != row) {
                            this.gameArray[row_2][col] = thisValue;
                            this.gameArray[row][col] = 0;
                            somethingHappened = true;
                        } if (thisValue === memValue && streak === this.requiredStreak) {

                            for (let index = 0; index < this.requiredStreak; index++) {
                                this.gameArray[row_2 - index][col] = 0;
                                if (index === this.requiredStreak - 1) {
                                    this.gameArray[row_2 - index][col] = thisValue * this.requiredStreak;
                                    this.calculateScore(thisValue);
                                    thisValue = thisValue * this.requiredStreak;
                                    row_2 = row_2 - index;
                                }
                            }
                            somethingHappened = true;
                            streak = 0;
                        }
                        this.actuateTile(row, col, row_2, col, thisValue);
                    }
                }
            }
            return somethingHappened;
        }
        flowDown() {
            var somethingHappened = false;
            //top down by row, col left to right
            for (var col = 0; col < this.gameArray[0].length; col++) {
                var streak = 1;
                var memValue = "undefined" //this should change whenever we hit a tile with a different value
                //length gives us max size, max size - 1 gives us max starting index of gameArray 
                for (var row = this.gameArray.length - 1; row >= 0; row--) { //we are on the current cell

                    var thisValue = this.gameArray[row][col]; //we set value of current cell to thisValue 

                    //if zero, ignore
                    if (thisValue != 0 && thisValue != memValue) {
                        memValue = thisValue;
                        streak = 1;
                    } else if (thisValue === memValue) {
                        streak++;
                    }

                    if (thisValue != 0) {
                        let row_2 = row;
                        do {
                            row_2++;
                        } while (row_2 < this.gameArray.length && this.gameArray[row_2][col] === 0);
                        row_2--;

                        if (row_2 != row) {
                            this.gameArray[row_2][col] = thisValue;
                            this.gameArray[row][col] = 0;
                            somethingHappened = true;
                        }
                        if (thisValue === memValue && streak === this.requiredStreak) {

                            for (let index = 0; index < this.requiredStreak; index++) {
                                this.gameArray[row_2 + index][col] = 0;
                                if (index === this.requiredStreak - 1) {
                                    this.gameArray[row_2 + index][col] = thisValue * this.requiredStreak;
                                    // this.actuateTile(row_2, col, (row_2 + index), col, thisValue * this.requiredStreak);
                                    this.calculateScore(thisValue);
                                    row_2 = row_2 + index;
                                    thisValue = thisValue * this.requiredStreak;
                                }
                            }
                            somethingHappened = true;
                            streak = 0;
                        }
                        this.actuateTile(row, col, row_2, col, thisValue);
                    }
                }
            }
            return somethingHappened;
        }
        flowRight() {
            var somethingHappened = false;
            //bottom up by row, col by col
            for (var row = 0; row < this.gameArray.length; row++) {
                var streak = 1;
                var memValue = "undefined" //this should change whenever we hit a tile with a different value
                //length gives us max size, max size - 1 gives us max starting index of gameArray 
                for (var col = this.gameArray.length - 1; col >= 0; col--) { //we are on the current cell

                    var thisValue = this.gameArray[row][col]; //we set value of current cell to thisValue 

                    //if zero, ignore
                    if (thisValue != 0 && thisValue != memValue) {
                        memValue = thisValue;
                        streak = 1;
                    } else if (thisValue === memValue) {
                        streak++;
                    }

                    if (thisValue != 0) {
                        let col_2 = col;

                        do {
                            col_2++;
                        } while (col_2 < this.gameArray.length && this.gameArray[row][col_2] === 0);
                        col_2--;

                        if (col_2 != col) {
                            this.gameArray[row][col_2] = thisValue;
                            this.gameArray[row][col] = 0;
                            somethingHappened = true;
                        }

                        if (thisValue === memValue && streak === this.requiredStreak) {

                            for (let index = 0; index < this.requiredStreak; index++) {
                                this.gameArray[row][col_2 + index] = 0;
                                if (index === this.requiredStreak - 1) {
                                    // this.actuateTile(row, col_2, row, col_2 + index, thisValue * this.requiredStreak)
                                    this.gameArray[row][col_2 + index] = thisValue * this.requiredStreak;
                                    this.calculateScore(thisValue);
                                    thisValue = thisValue * this.requiredStreak;
                                    col_2 = col_2 + index;
                                }
                            }
                            somethingHappened = true;
                            streak = 0;
                        }
                        this.actuateTile(row, col, row, col_2, thisValue);
                    }
                    if (row === this.gameArray.length - 1 && col === 0) {
                        // console.log("hi");
                        this.actuateTile(row, col, row, col, this.gameArray[row][col]);
                    }
                }
            }
            return somethingHappened;
        }
        flowLeft() {
            var somethingHappened = false;
            //bottom up by row, col by col
            for (var row = 0; row < this.gameArray.length; row++) {
                var streak = 1;
                var memValue = "undefined" //this should change whenever we hit a tile with a different value
                //length gives us max size, max size - 1 gives us max starting index of gameArray 
                for (var col = 0; col < this.gameArray[row].length; col++) { //we are on the current cell

                    var thisValue = this.gameArray[row][col]; //we set value of current cell to thisValue 

                    //if zero, ignore
                    if (thisValue != 0 && thisValue != memValue) {
                        memValue = thisValue;
                        streak = 1;
                    } else if (thisValue === memValue) {
                        streak++;
                    }
                    if (thisValue != 0) {
                        let col_2 = col;

                        do {
                            col_2--
                        } while (col_2 < this.gameArray.length && this.gameArray[row][col_2] === 0);
                        col_2++;

                        if (col_2 != col) {
                            this.gameArray[row][col_2] = thisValue;
                            this.gameArray[row][col] = 0;
                            somethingHappened = true;
                        }

                        if (thisValue === memValue && streak === this.requiredStreak) {

                            for (let index = 0; index < this.requiredStreak; index++) {
                                this.gameArray[row][col_2 - index] = 0;
                                if (index === this.requiredStreak - 1) {
                                    // this.actuateTile(row, col_2, row, col_2 - index, thisValue * this.requiredStreak);
                                    this.gameArray[row][col_2 - index] = thisValue * this.requiredStreak;
                                    this.calculateScore(thisValue);
                                    col_2 = col_2 - index;
                                    thisValue = thisValue * this.requiredStreak;
                                }
                            }
                            somethingHappened = true;
                            streak = 0;
                        }
                        this.actuateTile(row, col, row, col_2, thisValue);
                    }
                }
            }
            return somethingHappened;
        }
        debugFunction() {
            // this.gameArray[0][0] = 2048;
            // this.gameArray[0][1] = 1024;
            // this.gameArray[0][2] = 512;
            // this.gameArray[0][3] = 256;
            // this.gameArray[1][0] = 128;
            // this.gameArray[1][1] = 64;
            // this.gameArray[1][2] = 32;
            // this.gameArray[1][3] = 16;
            // this.gameArray[2][0] = 8;
            // this.gameArray[2][1] = 4;
            // this.gameArray[2][2] = 2;
            // this.gameArray[2][3] = 4096;
            // this.gameArray[3][1] = 8192;
            // this.displayArray();

            // this.createGameElements(4);
            // this.requiredStreak = 2;
            // this.gameArray = [[2, 0, 3, 0, 3, 0],
            //                 [2, 2, 0, 0, 0, 0],
            //                 [0, 0, 0, 0, 0, 0],
            //                 [2, 0, 0, 0, 0, 0],
            //                 [0, 0, 0, 0, 0, 0],
            //                 [2, 0, 0, 0, 0, 0]];
            this.gameArray = [[4, 16, 8, 4,],
            [2, 64, 4, 128],
            [16, 16, 8, 8],
            [16, 0, 0, 2]];

            this.gameArray = [[4, 16, 8, 4,],
            [0, 64, 4, 128],
            [2, 16, 8, 8],
            [0, 0, 0, 2]];
            this.displayArray();
            this.score = 0;


        }
    }
</script>
<script>
    var newGame = null;

    function initializeStuff() {
        newGame = new gameBoard(4);
        centerWindow();
        initializeAndCenterCells();
        // newGame.newRandomTile();
        newGame.displayArray();
    }
    function createBoard() {
        let boardSize = document.getElementById("gameSize").value;
        if (boardSize > 7) {
            boardSize = 7;
        }
        newGame = new gameBoard(boardSize);
        newGame.displayArray();
        centerWindow();
    }
    function centerWindow() {
        let w = window.innerWidth;
        let h = window.innerHeight;
        let element = document.getElementById("wrapper");
        let elementWidth = element.getBoundingClientRect().width;
        let elementHeight = element.getBoundingClientRect().height;
        element.style.top = (innerHeight * .25) + "px";
        element.style.left = ((innerWidth - elementWidth) * .5) + "px";

    }
    function centerToParent(element) {
        // console.log(element.parentElement.nodeName);

    }
    function initializeAndCenterCells() {
        var tiles = document.getElementsByTagName("tile");
        for (var i = 0; i < tiles.length; i++) {
            tiles[i] = centerToParent(tiles[i]);
        }
    }
    window.addEventListener('keydown', function (event) {
        if (event.keyCode === 37) {
            event.preventDefault();
            newGame.MoveTile("left");
        } if (event.keyCode === 39) {
            event.preventDefault();
            newGame.MoveTile("right");
        } if (event.keyCode === 40) {
            event.preventDefault();
            newGame.MoveTile("down");
        } if (event.keyCode === 38) {
            event.preventDefault();
            newGame.MoveTile("up");
        }
        // console.log(event.keyCode);
    });
</script>

<body onload="initializeStuff()">
    <div id="wrapper">
        <label for="gameSize">Enter in GameSize: </label>
        <input type="text" id="gameSize" name="gameSize"><br>
        <button onclick="createBoard()">New Game</button>
        <br>
        <br>
        <div id="gameBoard">
        </div>
        <p id="scoreTracker">0</p>
    </div>
</body>

</html>